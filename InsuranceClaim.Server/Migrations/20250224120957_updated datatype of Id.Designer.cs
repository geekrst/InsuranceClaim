// <auto-generated />
using System;
using InsuranceClaim.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InsuranceClaim.Server.Migrations
{
    [DbContext(typeof(InsuranceClaimDBContext))]
    [Migration("20250224120957_updated datatype of Id")]
    partial class updateddatatypeofId
    {
        /// <inheritdoc />
        protected  void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InsuranceClaim.Server.Models.PaymentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsInApproval")
                        .HasColumnType("bit");

                    b.Property<double>("PaymentClaimantCost")
                        .HasColumnType("float");

                    b.Property<double>("PaymentDamage")
                        .HasColumnType("float");

                    b.Property<double>("PaymentDefenceCost")
                        .HasColumnType("float");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentModel");
                });

            modelBuilder.Entity("InsuranceClaim.Server.Models.ReserveModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("IncurredClaimantCost")
                        .HasColumnType("float");

                    b.Property<double>("IncurredDamage")
                        .HasColumnType("float");

                    b.Property<double>("IncurredDefenceCost")
                        .HasColumnType("float");

                    b.Property<bool>("IsInApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOverRidden")
                        .HasColumnType("bit");

                    b.Property<double>("PaidClaimantCost")
                        .HasColumnType("float");

                    b.Property<double>("PaidDamage")
                        .HasColumnType("float");

                    b.Property<double>("PaidDefenceCost")
                        .HasColumnType("float");

                    b.Property<double>("ReserveClaimantCost")
                        .HasColumnType("float");

                    b.Property<double>("ReserveDamage")
                        .HasColumnType("float");

                    b.Property<double>("ReserveDefenceCost")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ReserveModel");
                });
#pragma warning restore 612, 618
        }
    }
}
